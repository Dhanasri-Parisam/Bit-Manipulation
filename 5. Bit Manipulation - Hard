==================================================================================================================
1. Shortest Subarray with OR at Least K (Medium)

ðŸ“Œ Approach:

Use Sliding Window technique.
Keep expanding the window until OR >= K, then try to shrink it.

-----------------------------------------------+

#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int shortestSubarray(vector<int>& nums, int k) {
    int n = nums.size();
    int left = 0, OR = 0, minLen = INT_MAX;

    for (int right = 0; right < n; right++) {
        OR |= nums[right];

        while (left <= right && OR >= k) {
            minLen = min(minLen, right - left + 1);
            OR ^= nums[left]; // Remove leftmost element effect
            left++;
        }
    }

    return minLen == INT_MAX ? -1 : minLen;
}

int main() {
    vector<int> nums = {1, 2, 3, 4, 5};
    int k = 7;
    cout << "Shortest Subarray Length: " << shortestSubarray(nums, k) << endl;
    return 0;
}

==================================================================================================================

==================================================================================================================
2. Minimum Array End (Medium)

ðŸ“Œ Approach:

We need to maximize the last element while keeping the bitwise OR the same.
Solution: Use the formula arr[n-1] = arr[n-2] | (arr[n-2] + 1)

-----------------------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int minimumArrayEnd(vector<int>& arr) {
    int n = arr.size();
    return arr[n - 2] | (arr[n - 2] + 1);
}

int main() {
    vector<int> arr = {3, 6, 7};
    cout << "Minimum Array End: " << minimumArrayEnd(arr) << endl;
    return 0;
}

==================================================================================================================

==================================================================================================================
3. Maximum OR (Medium)
ðŸ“Œ Approach:

The maximum OR of any subarray is the OR of the entire array.
Just compute OR of all elements

---------------------------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int maxOR(vector<int>& nums) {
    int OR = 0;
    for (int num : nums) OR |= num;
    return OR;
}

int main() {
    vector<int> nums = {1, 2, 3, 4, 5};
    cout << "Maximum OR: " << maxOR(nums) << endl;
    return 0;
}

==================================================================================================================

==================================================================================================================
4. Minimum Flips to Make A OR B Equal to C (Medium)
ðŸ“Œ Approach:

Iterate through each bit position (0 to 31).
If (A OR B) != C, count required bit flips.

---------------------------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int maxOR(vector<int>& nums) {
    int OR = 0;
    for (int num : nums) OR |= num;
    return OR;
}

int main() {
    vector<int> nums = {1, 2, 3, 4, 5};
    cout << "Maximum OR: " << maxOR(nums) << endl;
    return 0;
}

==================================================================================================================

==================================================================================================================
4. Find Subarray with Bitwise OR Closest to K (Hard)

ðŸ“Œ Approach:

Use Sliding Window + Binary Search.
Try all subarrays and track the closest OR to K.

---------------------------------------------------+

#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int closestSubarrayOR(vector<int>& nums, int k) {
    int n = nums.size();
    int closest = INT_MAX, diff = INT_MAX;

    for (int i = 0; i < n; i++) {
        int OR = 0;
        for (int j = i; j < n; j++) {
            OR |= nums[j];
            int newDiff = abs(OR - k);
            if (newDiff < diff) {
                diff = newDiff;
                closest = OR;
            }
        }
    }

    return closest;
}

int main() {
    vector<int> nums = {2, 5, 8, 3};
    int k = 6;
    cout << "Closest OR to K: " << closestSubarrayOR(nums, k) << endl;
    return 0;
}

==================================================================================================================

==================================================================================================================
5. Minimize OR of Remaining Elements Using Operations (Hard)

ðŸ“Œ Approach:

Greedy Approach:
Keep removing the highest power-of-2 set bit to minimize OR.

-----------------------------------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int minimizeOR(vector<int>& nums, int ops) {
    int OR = 0;
    for (int num : nums) OR |= num; // Compute full OR

    for (int i = 31; i >= 0 && ops > 0; i--) {
        if ((OR & (1 << i)) > 0) { // If bit is set, try to remove
            OR ^= (1 << i);
            ops--;
        }
    }
    
    return OR;
}

int main() {
    vector<int> nums = {3, 5, 7};
    int ops = 2;
    cout << "Minimized OR: " << minimizeOR(nums, ops) << endl;
    return 0;
}


==================================================================================================================

==================================================================================================================
6. Longest Nice Subarray (Medium)

ðŸ“Œ Approach:

Use Sliding Window + Bitwise AND to maintain unique bits.
----------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int maxOR(vector<int>& nums) {
    int OR = 0;
    for (int num : nums) OR |= num;
    return OR;
}

int main() {
    vector<int> nums = {1, 2, 3, 4, 5};
    cout << "Maximum OR: " << maxOR(nums) << endl;
    return 0;
}

==================================================================================================================

==================================================================================================================
7. Bitwise AND of Numbers Range (Medium)

ðŸ“Œ Approach:

Right Shift Until Equal, then shift back.
----------------------------------------+

#include <iostream>
using namespace std;

int rangeBitwiseAnd(int left, int right) {
    int shift = 0;
    while (left < right) {
        left >>= 1;
        right >>= 1;
        shift++;
    }
    return left << shift;
}

int main() {
    int left = 5, right = 7;
    cout << "Bitwise AND of Range: " << rangeBitwiseAnd(left, right) << endl;
    return 0;
}


==================================================================================================================

==================================================================================================================
8. Longest Subarray with Maximum Bitwise AND (Medium)

ðŸ“Œ Approach:

Find max bitwise AND, then find the longest subarray with that value.

-----------------------------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int longestSubarray(vector<int>& nums) {
    int maxVal = *max_element(nums.begin(), nums.end());
    int maxLen = 0, count = 0;

    for (int num : nums) {
        count = (num == maxVal) ? count + 1 : 0;
        maxLen = max(maxLen, count);
    }

    return maxLen;
}

int main() {
    vector<int> nums = {1, 2, 3, 3, 2, 3, 3, 3};
    cout << "Longest Subarray Length: " << longestSubarray(nums) << endl;
    return 0;
}


==================================================================================================================

==================================================================================================================
9. Number of Subarrays with AND Value of K (Hard)
ðŸ“Œ Approach:

Use Bitwise AND Prefix Approach to check valid subarrays.
-----------------------------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int countSubarrays(vector<int>& nums, int k) {
    int n = nums.size(), count = 0;

    for (int i = 0; i < n; i++) {
        int AND = nums[i];
        for (int j = i; j < n; j++) {
            AND &= nums[j];
            if (AND == k) count++;
            if (AND < k) break;
        }
    }

    return count;
}

int main() {
    vector<int> nums = {2, 4, 6, 8};
    int k = 2;
    cout << "Number of Valid Subarrays: " << countSubarrays(nums, k) << endl;
    return 0;
}

==================================================================================================================

==================================================================================================================
10. Triples with Bitwise AND Equal to Zero (Hard)
ðŸ“Œ Approach:

Use 3 Loops + Bitwise AND to count valid triplets.

-----------------------------------------------------+

#include <iostream>
#include <vector>
using namespace std;

int countTriplets(vector<int>& nums) {
    int count = 0;
    int n = nums.size();

    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < n; k++)
                if ((nums[i] & nums[j] & nums[k]) == 0) count++;

    return count;
}

int main() {
    vector<int> nums = {2, 1, 3};
    cout << "Triples with AND = 0: " << countTriplets(nums) << endl;
    return 0;
}


==================================================================================================================

==================================================================================================================
11. Minimum Operations to Form Subsequence with Target Sum (Hard)
ðŸ“Œ Approach:

Use Binary Representation and Greedy Approach.

---------------------------------------------------------------->

#include <iostream>
#include <vector>
using namespace std;

int minOperations(vector<int>& nums, int target) {
    vector<int> bitCount(32, 0);

    for (int num : nums)
        for (int i = 0; i < 32; i++)
            if ((num >> i) & 1) bitCount[i]++;

    int operations = 0, carry = 0;
    
    for (int i = 0; i < 32; i++) {
        if ((target >> i) & 1) {
            if (bitCount[i] > 0) {
                bitCount[i]--;
            } else {
                int j = i;
                while (j < 32 && bitCount[j] == 0) j++;
                if (j == 32) return -1;

                while (j > i) {
                    bitCount[j]--;
                    bitCount[j - 1] += 2;
                    j--;
                    operations++;
                }
            }
        }
        bitCount[i + 1] += bitCount[i] / 2;
    }

    return operations;
}

int main() {
    vector<int> nums = {1, 2, 8};
    int target = 7;
    cout << "Minimum Operations: " << minOperations(nums, target) << endl;
    return 0;
}

==================================================================================================================
